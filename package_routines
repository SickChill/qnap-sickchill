#!/bin/bash
######################################################################
# List of available definitions (it's not necessary to uncomment them)
######################################################################
###### Command definitions #####
#CMD_AWK="/bin/awk"
#CMD_CAT="/bin/cat"
#CMD_CHMOD="/bin/chmod"
#CMD_CHOWN="/bin/chown"
#CMD_CP="/bin/cp"
#CMD_CUT="/bin/cut"
#CMD_DATE="/bin/date"
#CMD_ECHO="/bin/echo"
#CMD_EXPR="/usr/bin/expr"
#CMD_FIND="/usr/bin/find"
#CMD_GETCFG="/sbin/getcfg"
#CMD_GREP="/bin/grep"
#CMD_GZIP="/bin/gzip"
#CMD_HOSTNAME="/bin/hostname"
#CMD_LN="/bin/ln"
#CMD_LOG_TOOL="/sbin/log_tool"
#CMD_MD5SUM="/bin/md5sum"
#CMD_MKDIR="/bin/mkdir"
#CMD_MV="/bin/mv"
#CMD_RM="/bin/rm"
#CMD_RMDIR="/bin/rmdir"
#CMD_SED="/bin/sed"
#CMD_SETCFG="/sbin/setcfg"
#CMD_SLEEP="/bin/sleep"
#CMD_SORT="/usr/bin/sort"
#CMD_SYNC="/bin/sync"
#CMD_TAR="/bin/tar"
#CMD_TOUCH="/bin/touch"
#CMD_WGET="/usr/bin/wget"
#CMD_WLOG="/sbin/write_log"
#CMD_XARGS="/usr/bin/xargs"
#CMD_7Z="/usr/local/sbin/7z"
#
###### System definitions #####
#SYS_EXTRACT_DIR="$(pwd)"
#SYS_CONFIG_DIR="/etc/config"
#SYS_INIT_DIR="/etc/init.d"
#SYS_STARTUP_DIR="/etc/rcS.d"
#SYS_SHUTDOWN_DIR="/etc/rcK.d"
#SYS_RSS_IMG_DIR="/home/httpd/RSS/images"
#SYS_QPKG_DATA_FILE_GZIP="./data.tar.gz"
#SYS_QPKG_DATA_FILE_BZIP2="./data.tar.bz2"
#SYS_QPKG_DATA_FILE_7ZIP="./data.tar.7z"
#SYS_QPKG_DATA_CONFIG_FILE="./conf.tar.gz"
#SYS_QPKG_DATA_MD5SUM_FILE="./md5sum"
#SYS_QPKG_DATA_PACKAGES_FILE="./Packages.gz"
#SYS_QPKG_CONFIG_FILE="$SYS_CONFIG_DIR/qpkg.conf"
#SYS_QPKG_CONF_FIELD_QPKGFILE="QPKG_File"
#SYS_QPKG_CONF_FIELD_NAME="Name"
#SYS_QPKG_CONF_FIELD_VERSION="Version"
#SYS_QPKG_CONF_FIELD_ENABLE="Enable"
#SYS_QPKG_CONF_FIELD_DATE="Date"
#SYS_QPKG_CONF_FIELD_SHELL="Shell"
#SYS_QPKG_CONF_FIELD_INSTALL_PATH="Install_Path"
#SYS_QPKG_CONF_FIELD_CONFIG_PATH="Config_Path"
#SYS_QPKG_CONF_FIELD_WEBUI="WebUI"
#SYS_QPKG_CONF_FIELD_WEBPORT="Web_Port"
#SYS_QPKG_CONF_FIELD_SERVICEPORT="Service_Port"
#SYS_QPKG_CONF_FIELD_SERVICE_PIDFILE="Pid_File"
#SYS_QPKG_CONF_FIELD_AUTHOR="Author"
#SYS_QPKG_CONF_FIELD_RC_NUMBER="RC_Number"
## The following variables are assigned values at run-time.
#SYS_HOSTNAME=$($CMD_HOSTNAME)
## Data file name (one of SYS_QPKG_DATA_FILE_GZIP, SYS_QPKG_DATA_FILE_BZIP2,
## or SYS_QPKG_DATA_FILE_7ZIP)
#SYS_QPKG_DATA_FILE=
## Base location.
#SYS_QPKG_BASE=""
## Base location of QPKG installed packages.
#SYS_QPKG_INSTALL_PATH=""
## Location of installed software.
#SYS_QPKG_DIR=""
## If the QPKG should be enabled or disabled after the installation/upgrade.
#SYS_QPKG_SERVICE_ENABLED=""
## Architecture of the device the QPKG is installed on.
#SYS_CPU_ARCH=""
## Name and location of system shares
#SYS_PUBLIC_SHARE=""
#SYS_PUBLIC_PATH=""
#SYS_DOWNLOAD_SHARE=""
#SYS_DOWNLOAD_PATH=""
#SYS_MULTIMEDIA_SHARE=""
#SYS_MULTIMEDIA_PATH=""
#SYS_RECORDINGS_SHARE=""
#SYS_RECORDINGS_PATH=""
#SYS_USB_SHARE=""
#SYS_USB_PATH=""
#SYS_WEB_SHARE=""
#SYS_WEB_PATH=""
## Path to ipkg or opkg package tool if installed.
#CMD_PKG_TOOL=
#
######################################################################
# All package specific functions shall call 'err_log MSG' if an error
# is detected that shall terminate the installation.
######################################################################
#
######################################################################
# Define any package specific operations that shall be performed when
# the package is removed.
######################################################################
#PKG_PRE_REMOVE="{
#}"
#
#PKG_MAIN_REMOVE="{
#}"
#
#PKG_POST_REMOVE="{
#}"
#
######################################################################
# Define any package specific initialization that shall be performed
# before the package is installed.
######################################################################
pkg_init(){
    export PATH=/Apps/bin:/Apps/bin/git/bin:/Apps/opt/bin:/opt/QPython2/bin:/opt/bin:/usr/local/bin:/usr/bin:/bin:$PATH

    # Check for git
    if [ -x /etc/init.d/git.sh ]; then
        $CMD_ECHO "  Starting git..."
        /etc/inhit.d/git.sh start
        $CMD_SLEEP 3
    fi

    CMD_GIT=$($CMD_GETCFG Git path -u -d None -f /etc/config/qpkg.conf)
    [ -x $CMD_GIT ] && return
    CMD_GIT=$(which git)
    VER=0
    [ -x $CMD_GIT ] && VER=$(expr substr "$($CMD_GIT --version 2>&1)" 13 13)
    for path in $(echo $PATH | tr ':' "\n"); do
        echo "Looking for $path/git"
        [ -x path/git ] || continue
        version=$(expr substr "$($path/git --version 2>&1)" 13 13)
        if [ $version > $VER ]; then
            CMD_GIT=$path/git
            VER=$version
        fi
    done
    if [ ! -x $CMD_GIT ]; then
        log_warn "Git not found, SickRage will be installed git-less"
    else
        log "Found Git Version ${VER} at ${CMD_GIT}"
    fi
    $CMD_SETCFG Git path $CMD_GIT -f /etc/config/qpkg.conf
    export CMD_GIT=$CMD_GIT

    # Find best Python.7
    CMD_PYTHON2=$($CMD_GETCFG Python2 path -u -d None -f /etc/config/qpkg.conf)
    [ -x $CMD_PYTHON2 ] && return
    CMD_PYTHON2=$(which python2.7)
    VER=0
    [ -x $CMD_PYTHON2 ] && VER=$(expr substr "$($CMD_PYTHON2 -V 2>&1)" 8 8)
    for path in $(echo $PATH | tr ':' "\n"); do
        echo "Looking for $path/python2.7"
        [ -x path/python2.7 ] || continue
        version=$(expr substr "$(${path}/python2.7 -V 2>&1)" 8 8)
        [ $version == 2.7* ] || continue
        if [ $version > $VER ]; then
            CMD_PYTHON2=$path/python2.7
            VER=$version
        fi
    done
    if [ -x $CMD_PYTHON2 ]; then
        log "Found Python Version ${VER} at ${CMD_PYTHON2}"
        $CMD_SETCFG Python2 path $CMD_PYTHON2 -f /etc/config/qpkg.conf
    fi
    export CMD_PYTHON2=$CMD_PYTHON2

}

######################################################################
# Define any package specific requirement checks that shall be
# performed before the package is installed.
######################################################################
pkg_check_requirement(){
    check for an internet connection
    $CMD_ECHO -n "Checking for internet: "
    $CMD_WGET -q --tries=5 --timeout=5 http://www.google.com -O /tmp/index.google &> /dev/null
    if [ ! -s /tmp/index.google ]; then
       err_log "No Internet connection found (can't reach www.google.com)"
    else
       $CMD_ECHO "Found!"
       $CMD_RM /tmp/index.google
    fi

    [ -x $CMD_PYTHON2 ] || log_error "Python was not found. Please re-install the Python qpkg."
}
######################################################################
# Define any package specific operations that shall be performed when
# the package is installed.
######################################################################
pkg_pre_install(){
    #copy important files to the tempdir
    [ -d $SYS_QPKG_DIR.$$ ] || $CMD_MKDIR $SYS_QPKG_DIR.$$
    if [ -f $SYS_QPKG_DIR/config.ini ]; then
        $CMD_MKDIR $SYS_QPKG_DIR.$$/config
        $CMD_CP $SYS_QPKG_DIR/config.ini $SYS_QPKG_DIR.$$/config
        [ -f $SYS_QPKG_DIR/sickbeard.db ] && $CMD_CP $SYS_QPKG_DIR/sickbeard.db $SYS_QPKG_DIR.$$/config
        [ -f $SYS_QPKG_DIR/cache.db ] && $CMD_CP $SYS_QPKG_DIR/cache.db $SYS_QPKG_DIR.$$/config
        [ -d $SYS_QPKG_DIR/cache ] && $CMD_CP -r $SYS_QPKG_DIR/cache $SYS_QPKG_DIR.$$/config
        [ -d $SYS_QPKG_DIR/cache ] && $CMD_CP -r $SYS_QPKG_DIR/cache $SYS_QPKG_DIR.$$/config
    else
        [ -d $SYS_QPKG_DIR/config ]  && $CMD_CP -rf $SYS_QPKG_DIR/config $SYS_QPKG_DIR.$$
    fi
    $CMD_SYNC

    #completely remove the old dir
    $CMD_RM -rf $SYS_QPKG_DIR
    $CMD_SLEEP 5 #without sleep this sometimes fails, expect this is a timing issue.
    $CMD_SYNC

    #move the temp dir to the new dir
    $CMD_MV $SYS_QPKG_DIR.$$ $SYS_QPKG_DIR
}

install_with_git(){
    if [ -x $CMD_GIT ]; then
        log "Trying to install using git"
        GIT_URL=git@github.com:SickRage/SickRage.git
        HTTPS_URL=https://github.com/SickRage/SickRage.git
        [ -d $SYS_QPKG_DIR/.git ] || git clone --depth 1 $GIT_URL $SYS_QPKG_DIR || git clone --depth 1 $HTTPS_URL $SYS_QPKG_DIR
        [ $? -ne 0 ] && log_warn "Git is broken, trying to install from tarball" && $CMD_RM -r $SYS_QPKG_DIR/sickrage
        CUR_COMMIT=$(git rev-parse HEAD)
        [ $? -ne 0 ] && log_warn "Git is broken, trying to install from tarball" && $CMD_RM -r $SYS_QPKG_DIR/sickrage
    fi
}

install_from_tarball(){
    if [ ! -d $SYS_QPKG_DIR/sickrage ]; then
        log "Trying to install from tarball"
        cd $SYS_QPKG_DIR
        CUR_COMMIT=$($CMD_WGET -qO - https://api.github.com/repos/SickRage/SickRage/branches/master | sed -e '/"sha"/!d' -e 's/\s*"sha": "\|",$//g' | head -n1)
        [ ! -z $CUR_COMMIT ] || log_error "Could not determine newest SickRage commit, try again later"
        $CMD_WGET -qO- https://github.com/SickRage/SickRage/archive/master.tar.gz | tar xzvf --strip=1 --unlink-first || log_error "Could download and extract the source"
    fi
}

pkg_install(){
    log "Installing QSickRage"
    install_with_git
    install_from_tarball

    $CMD_MKDIR -p $SYS_QPKG_DIR/config/
    $CMD_TOUCH $SYS_QPKG_DIR/config/config.ini
    $CMD_SETCFG General web_port 7073 -f $SYS_QPKG_DIR/config/config.ini
    $CMD_SETCFG General cur_commit_hash $CUR_COMMIT -f $SYS_QPKG_DIR/config/config.ini
    $CMD SETCFG General launch_browser 0 -f $SYS_QPKG_DIR/config/config.ini
    if [ -x $CMD_GIT ]; then
        $CMD SETCFG General git_path $CMD_GIT -f $SYS_QPKG_DIR/config/config.ini
    else
        $CMD SETCFG General git_path "" -f $SYS_QPKG_DIR/config/config.ini
    fi

    $CMD_SYNC
}
